-- TravelMate_AI.sql: 세현의 제주 여행 플래너 프로젝트 스크립트
-- Oracle SQL Developer에서 실행 가능
-- 수정: 트리거 삭제 오류 방지, 인덱스 중복 제거, INSERT 세미콜론 추가
SET DEFINE OFF;
WHENEVER SQLERROR CONTINUE;

-- 1. DROP TABLE, DROP SEQUENCE, DROP TRIGGER
-- 자식 테이블부터 삭제하여 외래 키 의존성 문제 방지
-- BEGIN ... EXECUTE IMMEDIATE ... EXCEPTION을 사용해 안정적으로 스크립트를 실행
-- 에러를 무시하고 스크립트를 계속 실행하려고 PL/SQL 블록을 사용
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_VENDOR_BOOKING_LINK CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_VENDOR_ITEM CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_VENDOR_CATEGORY CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_VENDOR CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_LOG CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_FRIEND CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_REPORT CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_AI_RECOMMEND_LOG CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_KPI_LOG CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_POINT CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_CODE CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_ADMIN_REPLY_LOG CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_SOCIAL_LOGIN CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_STATS CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_WEATHER CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_BOOKMARK CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_IMAGE CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_LIKE CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_REPLY CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_BOARD CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_REVIEW CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_ITINERARY_DETAIL CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_ITINERARY CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_LOCATION CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_RESERVATION CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE TM_USER CASCADE CONSTRAINTS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- 시퀀스 삭제
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_USER';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_RESERVATION';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_LOCATION';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_ITINERARY';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_ITINERARY_DETAIL';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_REVIEW';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_BOARD';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_REPLY';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_LIKE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_IMAGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_BOOKMARK';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_WEATHER';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_STATS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_SOCIAL_LOGIN';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_ADMIN_REPLY_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_CODE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_POINT';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_KPI_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_AI_RECOMMEND_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_REPORT';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_FRIEND';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_VENDOR';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_VENDOR_ITEM';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_VENDOR_BOOKING_LINK';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_TM_VENDOR_CATEGORY';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- 트리거 삭제 (오류 무시)
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_USER';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_RESERVATION';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_LOCATION';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_ITINERARY';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_ITINERARY_DETAIL';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_REVIEW';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_BOARD';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_REPLY';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_LIKE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_IMAGE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_BOOKMARK';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_WEATHER';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_STATS';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_SOCIAL_LOGIN';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_ADMIN_REPLY_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_CODE';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_POINT';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_KPI_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_AI_RECOMMEND_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_REPORT';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_FRIEND';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_LOG';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_VENDOR';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_VENDOR_ITEM';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_VENDOR_BOOKING_LINK';
EXCEPTION WHEN OTHERS THEN NULL; END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TRIGGER TRG_TM_VENDOR_CATEGORY';
EXCEPTION WHEN OTHERS THEN NULL; END;
/

-- 2. CREATE TABLE
CREATE TABLE TM_USER (
    user_id NUMBER(10),
    username VARCHAR2(50) NOT NULL,
    password VARCHAR2(255) NOT NULL,
    name VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    phone_number VARCHAR2(20),
    birth_date DATE,
    gender CHAR(1) CHECK (gender IN ('M', 'F')),
    status VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL CHECK (status IN ('ACTIVE', 'BLOCKED', 'DELETED')),
    role VARCHAR2(20) DEFAULT 'USER' NOT NULL CHECK (role IN ('USER', 'ADMIN')),
    created_at TIMESTAMP DEFAULT SYSDATE NOT NULL,
    updated_at TIMESTAMP,
    CONSTRAINT PK_TM_USER PRIMARY KEY (user_id),
    CONSTRAINT UK_TM_USER_USERNAME UNIQUE (username),
    CONSTRAINT UK_TM_USER_EMAIL UNIQUE (email)
);

CREATE TABLE TM_RESERVATION (
    reservation_id NUMBER,
    user_id NUMBER NOT NULL,
    reservation_type VARCHAR2(20) NOT NULL,
    target_name VARCHAR2(100) NOT NULL,
    reservation_date DATE DEFAULT SYSDATE NOT NULL,
    checkin_date DATE,
    checkout_date DATE,
    price NUMBER DEFAULT 0,
    status_code VARCHAR2(10) DEFAULT 'ACTIVE' NOT NULL,
    memo VARCHAR2(500),
    reg_dt DATE DEFAULT SYSDATE NOT NULL,
    mod_dt DATE,
    CONSTRAINT PK_TM_RESERVATION PRIMARY KEY (reservation_id)
);

CREATE TABLE TM_LOCATION (
    location_id NUMBER,
    location_name VARCHAR2(100) NOT NULL,
    location_type VARCHAR2(20) NOT NULL,
    country VARCHAR2(50),
    city VARCHAR2(50),
    address VARCHAR2(200),
    latitude NUMBER(10,6),
    longitude NUMBER(10,6),
    description VARCHAR2(500),
    reg_dt DATE DEFAULT SYSDATE NOT NULL,
    mod_dt DATE,
    CONSTRAINT PK_TM_LOCATION PRIMARY KEY (location_id)
);

CREATE TABLE TM_ITINERARY (
    itinerary_id NUMBER,
    user_id NUMBER NOT NULL,
    itinerary_name VARCHAR2(100) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    is_ai_recommend CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_ai_recommend IN ('Y', 'N')),
    region_summary VARCHAR2(300),
    memo VARCHAR2(1000),
    reg_dt DATE DEFAULT SYSDATE NOT NULL,
    mod_dt DATE,
    CONSTRAINT PK_TM_ITINERARY PRIMARY KEY (itinerary_id)
);

CREATE TABLE TM_ITINERARY_DETAIL (
    detail_id NUMBER,
    itinerary_id NUMBER NOT NULL,
    location_id NUMBER,
    title VARCHAR2(100) NOT NULL,
    memo VARCHAR2(1000),
    plan_date DATE NOT NULL,
    plan_time VARCHAR2(5) CHECK (REGEXP_LIKE(plan_time, '^\d{2}:\d{2}$')),
    stay_minutes NUMBER,
    transport_mode VARCHAR2(20),
    is_booked CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_booked IN ('Y', 'N')),
    reg_dt DATE DEFAULT SYSDATE NOT NULL,
    mod_dt DATE,
    CONSTRAINT PK_TM_ITINERARY_DETAIL PRIMARY KEY (detail_id)
);

CREATE TABLE TM_REVIEW (
    review_id NUMBER(10),
    user_id NUMBER(10) NOT NULL,
    title VARCHAR2(100) NOT NULL,
    content CLOB,
    rating NUMBER(2,1) CHECK (rating BETWEEN 0 AND 5) NOT NULL,
    created_at DATE DEFAULT SYSDATE NOT NULL,
    updated_at DATE,
    is_deleted CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_deleted IN ('Y', 'N')),
    CONSTRAINT PK_TM_REVIEW PRIMARY KEY (review_id)
);

CREATE TABLE TM_BOARD (
    board_id NUMBER,
    user_id NUMBER NOT NULL,
    category VARCHAR2(30) NOT NULL,
    title VARCHAR2(200) NOT NULL,
    content CLOB NOT NULL,
    like_count NUMBER DEFAULT 0 NOT NULL,
    view_count NUMBER DEFAULT 0 NOT NULL,
    is_secret CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_secret IN ('Y', 'N')),
    is_deleted CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_deleted IN ('Y', 'N')),
    is_pinned CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_pinned IN ('Y', 'N')),
    created_at DATE DEFAULT SYSDATE NOT NULL,
    updated_at DATE,
    CONSTRAINT PK_TM_BOARD PRIMARY KEY (board_id)
);

CREATE TABLE TM_REPLY (
    reply_id NUMBER(10),
    board_id NUMBER(10) NOT NULL,
    user_id NUMBER(10) NOT NULL,
    content VARCHAR2(1000) NOT NULL,
    created_at DATE DEFAULT SYSDATE NOT NULL,
    updated_at DATE,
    is_deleted CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_deleted IN ('Y', 'N')),
    parent_reply_id NUMBER(10),
    CONSTRAINT PK_TM_REPLY PRIMARY KEY (reply_id)
);

CREATE TABLE TM_LIKE (
    like_id NUMBER(10),
    target_type VARCHAR2(20) CHECK (target_type IN ('BOARD', 'REPLY')) NOT NULL,
    target_id NUMBER(10) NOT NULL,
    user_id NUMBER(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_TM_LIKE PRIMARY KEY (like_id)
);

CREATE TABLE TM_IMAGE (
    image_id NUMBER(10),
    target_type VARCHAR2(20) CHECK (target_type IN ('BOARD', 'LOCATION')) NOT NULL,
    target_id NUMBER(10) NOT NULL,
    original_filename VARCHAR2(255) NOT NULL,
    stored_filename VARCHAR2(255) UNIQUE NOT NULL,
    is_thumbnail CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_thumbnail IN ('Y', 'N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_TM_IMAGE PRIMARY KEY (image_id)
);

CREATE TABLE TM_BOOKMARK (
    bookmark_id NUMBER(10),
    user_id NUMBER(10) NOT NULL,
    target_type VARCHAR2(20) CHECK (target_type IN ('BOARD', 'LOCATION', 'ITINERARY')) NOT NULL,
    target_id NUMBER(10) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_TM_BOOKMARK PRIMARY KEY (bookmark_id)
);

CREATE TABLE TM_WEATHER (
    weather_id NUMBER(10),
    location_name VARCHAR2(100) NOT NULL,
    weather_date DATE NOT NULL,
    temp_min NUMBER(5,1),
    temp_max NUMBER(5,1),
    weather_desc VARCHAR2(50),
    precipitation NUMBER(5,1),
    snowfall NUMBER(5,1),
    humidity NUMBER(5,1),
    wind_speed NUMBER(5,1),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    pm10 NUMBER(5,1),
    pm25 NUMBER(5,1),
    CONSTRAINT PK_TM_WEATHER PRIMARY KEY (weather_id)
);

CREATE TABLE TM_STATS (
    stats_id NUMBER,
    user_id NUMBER,
    category VARCHAR2(50) NOT NULL,
    target_id NUMBER,
    count NUMBER DEFAULT 0 NOT NULL,
    stats_date DATE DEFAULT SYSDATE NOT NULL,
    created_at DATE DEFAULT SYSDATE NOT NULL,
    updated_at DATE,
    CONSTRAINT PK_TM_STATS PRIMARY KEY (stats_id)
);

CREATE TABLE TM_SOCIAL_LOGIN (
    social_login_id NUMBER,
    user_id NUMBER NOT NULL,
    provider VARCHAR2(20) CHECK (provider IN ('KAKAO', 'NAVER', 'GOOGLE')) NOT NULL,
    provider_id VARCHAR2(100) UNIQUE NOT NULL,
    email VARCHAR2(100),
    profile_image VARCHAR2(200),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONSTRAINT PK_TM_SOCIAL_LOGIN PRIMARY KEY (social_login_id)
);

CREATE TABLE TM_ADMIN_REPLY_LOG (
    reply_log_id NUMBER,
    target_type VARCHAR2(20) CHECK (target_type IN ('BOARD', 'REVIEW', 'DRINK', 'RECIPE')) NOT NULL,
    target_id NUMBER NOT NULL,
    admin_id NUMBER NOT NULL,
    content CLOB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP,
    is_deleted CHAR(1) DEFAULT 'N' NOT NULL CHECK (is_deleted IN ('Y', 'N')),
    CONSTRAINT PK_TM_ADMIN_REPLY_LOG PRIMARY KEY (reply_log_id)
);

CREATE TABLE TM_CODE (
    code_id NUMBER,
    code_group VARCHAR2(50) NOT NULL,
    code VARCHAR2(50) NOT NULL,
    code_name VARCHAR2(100) NOT NULL,
    description VARCHAR2(255),
    use_yn CHAR(1) DEFAULT 'Y' NOT NULL CHECK (use_yn IN ('Y', 'N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at TIMESTAMP,
    CONSTRAINT PK_TM_CODE PRIMARY KEY (code_id)
);

CREATE TABLE TM_POINT (
    point_id NUMBER(19,0),
    user_id NUMBER(19,0) NOT NULL,
    point_change NUMBER(5,0) NOT NULL,
    point_reason_cd VARCHAR2(30) NOT NULL,
    point_desc VARCHAR2(200),
    created_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_POINT PRIMARY KEY (point_id)
);

CREATE TABLE TM_KPI_LOG (
    kpi_id NUMBER,
    user_id NUMBER,
    kpi_type VARCHAR2(50) NOT NULL,
    target_id NUMBER,
    target_type VARCHAR2(30),
    kpi_count NUMBER DEFAULT 1 NOT NULL,
    occurred_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_KPI_LOG PRIMARY KEY (kpi_id)
);

CREATE TABLE TM_AI_RECOMMEND_LOG (
    recommend_log_id NUMBER,
    user_id NUMBER,
    recommend_type VARCHAR2(30) NOT NULL,
    result_id NUMBER,
    result_type VARCHAR2(30),
    context CLOB,
    emotion_tags VARCHAR2(1000),
    user_input VARCHAR2(2000),
    feedback VARCHAR2(10) CHECK (feedback IN ('GOOD', 'BAD')),
    recommended_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_AI_RECOMMEND_LOG PRIMARY KEY (recommend_log_id)
);

CREATE TABLE TM_REPORT (
    report_id NUMBER(10),
    target_type VARCHAR2(20) CHECK (target_type IN ('BOARD', 'REPLY')) NOT NULL,
    target_id NUMBER(10) NOT NULL,
    report_reason VARCHAR2(100) NOT NULL,
    report_detail CLOB,
    reporter_id NUMBER(10) NOT NULL,
    report_date DATE DEFAULT SYSDATE NOT NULL,
    status VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL,
    admin_id NUMBER(10),
    resolve_date DATE,
    CONSTRAINT PK_TM_REPORT PRIMARY KEY (report_id)
);

CREATE TABLE TM_FRIEND (
    friend_id NUMBER(10),
    requester_id NUMBER(10) NOT NULL,
    receiver_id NUMBER(10) NOT NULL,
    status VARCHAR2(20) DEFAULT 'ACTIVE' NOT NULL CHECK (status IN ('PENDING', 'ACCEPTED', 'REJECTED', 'BLOCKED')),
    request_date DATE DEFAULT SYSDATE NOT NULL,
    response_date DATE,
    CONSTRAINT PK_TM_FRIEND PRIMARY KEY (friend_id)
);

CREATE TABLE TM_LOG (
    log_id NUMBER(10),
    user_id NUMBER(10),
    action_type VARCHAR2(30) NOT NULL,
    target_type VARCHAR2(30),
    target_id NUMBER(10),
    description VARCHAR2(500),
    created_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_LOG PRIMARY KEY (log_id)
);

CREATE TABLE TM_VENDOR (
    vendor_id NUMBER,
    name VARCHAR2(100) UNIQUE NOT NULL,
    category VARCHAR2(30) NOT NULL,
    contact_email VARCHAR2(100),
    contact_phone VARCHAR2(20),
    registered_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_VENDOR PRIMARY KEY (vendor_id)
);

CREATE TABLE TM_VENDOR_ITEM (
    item_id NUMBER,
    vendor_id NUMBER NOT NULL,
    name VARCHAR2(200) NOT NULL,
    category VARCHAR2(30) NOT NULL,
    region VARCHAR2(100),
    price NUMBER(10,2),
    description CLOB,
    available CHAR(1) DEFAULT 'Y' NOT NULL CHECK (available IN ('Y', 'N')),
    registered_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_VENDOR_ITEM PRIMARY KEY (item_id)
);

CREATE TABLE TM_VENDOR_BOOKING_LINK (
    link_id NUMBER,
    item_id NUMBER NOT NULL,
    link_type VARCHAR2(30) NOT NULL,
    booking_url VARCHAR2(1000) NOT NULL,
    is_active CHAR(1) DEFAULT 'Y' NOT NULL CHECK (is_active IN ('Y', 'N')),
    created_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_VENDOR_BOOKING_LINK PRIMARY KEY (link_id)
);

CREATE TABLE TM_VENDOR_CATEGORY (
    category_id NUMBER,
    category_code VARCHAR2(50) UNIQUE NOT NULL,
    category_name VARCHAR2(100) NOT NULL,
    description VARCHAR2(500),
    is_active CHAR(1) DEFAULT 'Y' NOT NULL CHECK (is_active IN ('Y', 'N')),
    created_at DATE DEFAULT SYSDATE NOT NULL,
    CONSTRAINT PK_TM_VENDOR_CATEGORY PRIMARY KEY (category_id)
);

-- 3. CREATE SEQUENCE
CREATE SEQUENCE SEQ_TM_USER START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_RESERVATION START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_LOCATION START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_ITINERARY START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_ITINERARY_DETAIL START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_REVIEW START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_BOARD START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_REPLY START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_LIKE START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_IMAGE START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_BOOKMARK START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_WEATHER START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_STATS START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_SOCIAL_LOGIN START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_ADMIN_REPLY_LOG START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_CODE START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_POINT START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_KPI_LOG START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_AI_RECOMMEND_LOG START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_REPORT START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_FRIEND START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_LOG START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_VENDOR START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_VENDOR_ITEM START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_VENDOR_BOOKING_LINK START WITH 1 INCREMENT BY 1 CACHE 20;
CREATE SEQUENCE SEQ_TM_VENDOR_CATEGORY START WITH 1 INCREMENT BY 1 CACHE 20;

-- 4. CREATE TRIGGER
CREATE OR REPLACE TRIGGER TRG_TM_USER
BEFORE INSERT ON TM_USER
FOR EACH ROW
BEGIN
    :NEW.user_id := SEQ_TM_USER.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_RESERVATION
BEFORE INSERT ON TM_RESERVATION
FOR EACH ROW
BEGIN
    :NEW.reservation_id := SEQ_TM_RESERVATION.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_LOCATION
BEFORE INSERT ON TM_LOCATION
FOR EACH ROW
BEGIN
    :NEW.location_id := SEQ_TM_LOCATION.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_ITINERARY
BEFORE INSERT ON TM_ITINERARY
FOR EACH ROW
BEGIN
    :NEW.itinerary_id := SEQ_TM_ITINERARY.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_ITINERARY_DETAIL
BEFORE INSERT ON TM_ITINERARY_DETAIL
FOR EACH ROW
BEGIN
    :NEW.detail_id := SEQ_TM_ITINERARY_DETAIL.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_REVIEW
BEFORE INSERT ON TM_REVIEW
FOR EACH ROW
BEGIN
    :NEW.review_id := SEQ_TM_REVIEW.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_BOARD
BEFORE INSERT ON TM_BOARD
FOR EACH ROW
BEGIN
    :NEW.board_id := SEQ_TM_BOARD.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_REPLY
BEFORE INSERT ON TM_REPLY
FOR EACH ROW
BEGIN
    :NEW.reply_id := SEQ_TM_REPLY.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_LIKE
BEFORE INSERT ON TM_LIKE
FOR EACH ROW
BEGIN
    :NEW.like_id := SEQ_TM_LIKE.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_IMAGE
BEFORE INSERT ON TM_IMAGE
FOR EACH ROW
BEGIN
    :NEW.image_id := SEQ_TM_IMAGE.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_BOOKMARK
BEFORE INSERT ON TM_BOOKMARK
FOR EACH ROW
BEGIN
    :NEW.bookmark_id := SEQ_TM_BOOKMARK.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_WEATHER
BEFORE INSERT ON TM_WEATHER
FOR EACH ROW
BEGIN
    :NEW.weather_id := SEQ_TM_WEATHER.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_STATS
BEFORE INSERT ON TM_STATS
FOR EACH ROW
BEGIN
    :NEW.stats_id := SEQ_TM_STATS.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_SOCIAL_LOGIN
BEFORE INSERT ON TM_SOCIAL_LOGIN
FOR EACH ROW
BEGIN
    :NEW.social_login_id := SEQ_TM_SOCIAL_LOGIN.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_ADMIN_REPLY_LOG
BEFORE INSERT ON TM_ADMIN_REPLY_LOG
FOR EACH ROW
BEGIN
    :NEW.reply_log_id := SEQ_TM_ADMIN_REPLY_LOG.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_CODE
BEFORE INSERT ON TM_CODE
FOR EACH ROW
BEGIN
    :NEW.code_id := SEQ_TM_CODE.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_POINT
BEFORE INSERT ON TM_POINT
FOR EACH ROW
BEGIN
    :NEW.point_id := SEQ_TM_POINT.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_KPI_LOG
BEFORE INSERT ON TM_KPI_LOG
FOR EACH ROW
BEGIN
    :NEW.kpi_id := SEQ_TM_KPI_LOG.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_AI_RECOMMEND_LOG
BEFORE INSERT ON TM_AI_RECOMMEND_LOG
FOR EACH ROW
BEGIN
    :NEW.recommend_log_id := SEQ_TM_AI_RECOMMEND_LOG.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_REPORT
BEFORE INSERT ON TM_REPORT
FOR EACH ROW
BEGIN
    :NEW.report_id := SEQ_TM_REPORT.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_FRIEND
BEFORE INSERT ON TM_FRIEND
FOR EACH ROW
BEGIN
    :NEW.friend_id := SEQ_TM_FRIEND.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_LOG
BEFORE INSERT ON TM_LOG
FOR EACH ROW
BEGIN
    :NEW.log_id := SEQ_TM_LOG.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_VENDOR
BEFORE INSERT ON TM_VENDOR
FOR EACH ROW
BEGIN
    :NEW.vendor_id := SEQ_TM_VENDOR.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_VENDOR_ITEM
BEFORE INSERT ON TM_VENDOR_ITEM
FOR EACH ROW
BEGIN
    :NEW.item_id := SEQ_TM_VENDOR_ITEM.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_VENDOR_BOOKING_LINK
BEFORE INSERT ON TM_VENDOR_BOOKING_LINK
FOR EACH ROW
BEGIN
    :NEW.link_id := SEQ_TM_VENDOR_BOOKING_LINK.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER TRG_TM_VENDOR_CATEGORY
BEFORE INSERT ON TM_VENDOR_CATEGORY
FOR EACH ROW
BEGIN
    :NEW.category_id := SEQ_TM_VENDOR_CATEGORY.NEXTVAL;
END;
/

-- 5. ALTER TABLE ... ADD CONSTRAINT FOREIGN KEY
ALTER TABLE TM_RESERVATION ADD CONSTRAINT FK_TM_RESERVATION_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_ITINERARY ADD CONSTRAINT FK_TM_ITINERARY_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_ITINERARY_DETAIL ADD CONSTRAINT FK_TM_ITINERARY_DETAIL_ITINERARY FOREIGN KEY (itinerary_id) REFERENCES TM_ITINERARY(itinerary_id);
ALTER TABLE TM_ITINERARY_DETAIL ADD CONSTRAINT FK_TM_ITINERARY_DETAIL_LOCATION FOREIGN KEY (location_id) REFERENCES TM_LOCATION(location_id);
ALTER TABLE TM_REVIEW ADD CONSTRAINT FK_TM_REVIEW_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_BOARD ADD CONSTRAINT FK_TM_BOARD_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_REPLY ADD CONSTRAINT FK_TM_REPLY_BOARD FOREIGN KEY (board_id) REFERENCES TM_BOARD(board_id);
ALTER TABLE TM_REPLY ADD CONSTRAINT FK_TM_REPLY_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_REPLY ADD CONSTRAINT FK_TM_REPLY_PARENT FOREIGN KEY (parent_reply_id) REFERENCES TM_REPLY(reply_id);
ALTER TABLE TM_LIKE ADD CONSTRAINT FK_TM_LIKE_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_BOOKMARK ADD CONSTRAINT FK_TM_BOOKMARK_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_STATS ADD CONSTRAINT FK_TM_STATS_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_SOCIAL_LOGIN ADD CONSTRAINT FK_TM_SOCIAL_LOGIN_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_ADMIN_REPLY_LOG ADD CONSTRAINT FK_TM_ADMIN_REPLY_LOG_ADMIN FOREIGN KEY (admin_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_POINT ADD CONSTRAINT FK_TM_POINT_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_KPI_LOG ADD CONSTRAINT FK_TM_KPI_LOG_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_AI_RECOMMEND_LOG ADD CONSTRAINT FK_TM_AI_RECOMMEND_LOG_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_REPORT ADD CONSTRAINT FK_TM_REPORT_REPORTER FOREIGN KEY (reporter_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_REPORT ADD CONSTRAINT FK_TM_REPORT_ADMIN FOREIGN KEY (admin_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_FRIEND ADD CONSTRAINT FK_TM_FRIEND_REQUESTER FOREIGN KEY (requester_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_FRIEND ADD CONSTRAINT FK_TM_FRIEND_RECEIVER FOREIGN KEY (receiver_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_LOG ADD CONSTRAINT FK_TM_LOG_USER FOREIGN KEY (user_id) REFERENCES TM_USER(user_id);
ALTER TABLE TM_VENDOR_ITEM ADD CONSTRAINT FK_TM_VENDOR_ITEM_VENDOR FOREIGN KEY (vendor_id) REFERENCES TM_VENDOR(vendor_id);
ALTER TABLE TM_VENDOR_BOOKING_LINK ADD CONSTRAINT FK_TM_VENDOR_BOOKING_LINK_ITEM FOREIGN KEY (item_id) REFERENCES TM_VENDOR_ITEM(item_id);

-- 6. CREATE INDEX, COMMENT ON, GRANT
-- 인덱스 생성 (IDX_TM_USER_EMAIL 제거: 이미 UK_TM_USER_EMAIL로 인덱스 존재)
CREATE INDEX IDX_TM_LOCATION_CITY ON TM_LOCATION(city);
CREATE INDEX IDX_TM_ITINERARY_USER ON TM_ITINERARY(user_id);
CREATE INDEX IDX_TM_BOARD_CATEGORY ON TM_BOARD(category);
CREATE INDEX IDX_TM_REPLY_BOARD ON TM_REPLY(board_id);
CREATE INDEX IDX_TM_LIKE_TARGET ON TM_LIKE(target_type, target_id);
CREATE INDEX IDX_TM_BOOKMARK_USER_TARGET ON TM_BOOKMARK(user_id, target_type);
CREATE INDEX IDX_TM_WEATHER_LOCATION_DATE ON TM_WEATHER(location_name, weather_date);
CREATE INDEX IDX_TM_STATS_CATEGORY ON TM_STATS(category);
CREATE INDEX IDX_TM_SOCIAL_LOGIN_PROVIDER ON TM_SOCIAL_LOGIN(provider, provider_id);
CREATE INDEX IDX_TM_ADMIN_REPLY_LOG_TARGET ON TM_ADMIN_REPLY_LOG(target_type, target_id);
CREATE INDEX IDX_TM_CODE_GROUP_CODE ON TM_CODE(code_group, code);
CREATE INDEX IDX_TM_POINT_USER ON TM_POINT(user_id);
CREATE INDEX IDX_TM_KPI_LOG_KPI_TYPE ON TM_KPI_LOG(kpi_type);
CREATE INDEX IDX_TM_AI_RECOMMEND_LOG_USER ON TM_AI_RECOMMEND_LOG(user_id);
CREATE INDEX IDX_TM_REPORT_TARGET ON TM_REPORT(target_type, target_id);
CREATE INDEX IDX_TM_FRIEND_REQUESTER_RECEIVER ON TM_FRIEND(requester_id, receiver_id);
CREATE INDEX IDX_TM_LOG_ACTION_TYPE ON TM_LOG(action_type);
CREATE INDEX IDX_TM_VENDOR_CATEGORY ON TM_VENDOR(category);
CREATE INDEX IDX_TM_VENDOR_ITEM_VENDOR ON TM_VENDOR_ITEM(vendor_id);

-- 주석 추가
COMMENT ON COLUMN TM_USER.gender IS '성별 (M/F)';
COMMENT ON COLUMN TM_RESERVATION.status_code IS '예약 상태: ACTIVE, CANCELLED 등';
COMMENT ON COLUMN TM_ITINERARY.is_ai_recommend IS 'AI 추천 여부 (Y/N)';
COMMENT ON COLUMN TM_ITINERARY_DETAIL.plan_time IS '방문 예정 시간 (hh:mm)';
COMMENT ON COLUMN TM_REVIEW.rating IS '평점 (0.0 ~ 5.0)';
COMMENT ON COLUMN TM_BOARD.is_secret IS '비밀글 여부 (Y/N)';
COMMENT ON COLUMN TM_REPLY.parent_reply_id IS '상위 댓글 ID (NULL일 경우 최상위 댓글)';
COMMENT ON COLUMN TM_LIKE.target_type IS '좋아요 대상 타입 (BOARD, REPLY)';
COMMENT ON COLUMN TM_IMAGE.is_thumbnail IS '썸네일 여부 (Y/N)';
COMMENT ON COLUMN TM_BOOKMARK.target_type IS '찜 대상 종류 (BOARD, LOCATION, ITINERARY)';
COMMENT ON COLUMN TM_WEATHER.weather_desc IS '날씨 설명 (맑음, 흐림, 비 등)';
COMMENT ON COLUMN TM_STATS.category IS '통계 카테고리 (SEARCH, VIEW, LIKE 등)';
COMMENT ON COLUMN TM_SOCIAL_LOGIN.provider IS '소셜 로그인 제공자 (KAKAO, NAVER, GOOGLE)';
COMMENT ON COLUMN TM_ADMIN_REPLY_LOG.target_type IS '답변이 달린 대상 유형 (BOARD, REVIEW, DRINK, RECIPE)';
COMMENT ON COLUMN TM_CODE.use_yn IS '사용 여부 (Y/N)';
COMMENT ON COLUMN TM_POINT.point_change IS '변화된 포인트 값 (양수/음수 가능)';
COMMENT ON COLUMN TM_KPI_LOG.kpi_type IS 'KPI 구분 (SEARCH, CLICK, LIKE 등)';
COMMENT ON COLUMN TM_AI_RECOMMEND_LOG.recommend_type IS '추천 유형 (COURSE, DRINK, PLACE 등)';
COMMENT ON COLUMN TM_REPORT.status IS '신고 처리 상태 (PENDING, DONE, REJECTED)';
COMMENT ON COLUMN TM_FRIEND.status IS '친구 관계 상태 (PENDING, ACCEPTED, REJECTED, BLOCKED)';
COMMENT ON COLUMN TM_LOG.action_type IS '로그 액션 유형 (LOGIN, SIGNUP, API_CALL 등)';
COMMENT ON COLUMN TM_VENDOR.category IS '업체 카테고리 (HOTEL, TRANSPORT, FOOD 등)';
COMMENT ON COLUMN TM_VENDOR_ITEM.available IS '현재 예약 가능 여부 (Y/N)';
COMMENT ON COLUMN TM_VENDOR_BOOKING_LINK.is_active IS '링크 활성화 여부 (Y/N)';
COMMENT ON COLUMN TM_VENDOR_CATEGORY.is_active IS '카테고리 사용 여부 (Y/N)';

-- 권한 부여
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_USER TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_RESERVATION TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_LOCATION TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_ITINERARY TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_ITINERARY_DETAIL TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_REVIEW TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_BOARD TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_REPLY TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_LIKE TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_IMAGE TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_BOOKMARK TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_WEATHER TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_STATS TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_SOCIAL_LOGIN TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_ADMIN_REPLY_LOG TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_CODE TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_POINT TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_KPI_LOG TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_AI_RECOMMEND_LOG TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_REPORT TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_FRIEND TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_LOG TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_VENDOR TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_VENDOR_ITEM TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_VENDOR_BOOKING_LINK TO travelmate_ai;
GRANT SELECT, INSERT, UPDATE, DELETE ON TM_VENDOR_CATEGORY TO travelmate_ai;


-- 7. INSERT INTO (테스트 데이터)
-- 1. TM_USER
INSERT INTO TM_USER (username, password, name, email, phone_number, birth_date, gender, status, role) 
VALUES ('sehyeon01', 'pw1234', '정세현', 'sehyeon01@example.com', '010-1234-5678', TO_DATE('1994-05-01', 'YYYY-MM-DD'), 'M', 'ACTIVE', 'USER');
INSERT INTO TM_USER (username, password, name, email, phone_number, birth_date, gender, status, role) 
VALUES ('yoonjung02', 'pw5678', '박윤정', 'yoonjung02@example.com', '010-5678-1234', TO_DATE('1995-09-15', 'YYYY-MM-DD'), 'F', 'ACTIVE', 'USER');
INSERT INTO TM_USER (username, password, name, email, phone_number, birth_date, gender, status, role) 
VALUES ('admin01', 'admin1234', '관리자', 'admin@example.com', NULL, NULL, NULL, 'ACTIVE', 'ADMIN');
COMMIT;

-- 2. TM_LOCATION
INSERT INTO TM_LOCATION (location_name, location_type, country, city, address, latitude, longitude, description) 
VALUES ('제주 공항', '공항', '대한민국', '제주', '제주특별자치도 제주시 공항로 2', 33.5067, 126.4928, '제주 국제 공항');
INSERT INTO TM_LOCATION (location_name, location_type, country, city, address, latitude, longitude, description) 
VALUES ('성산일출봉', '관광지', '대한민국', '제주', '제주특별자치도 서귀포시 성산읍 일출로 284-12', 33.4588, 126.9403, '일출 명소');
COMMIT;

-- 3. TM_ITINERARY
INSERT INTO TM_ITINERARY (user_id, itinerary_name, start_date, end_date, is_ai_recommend, region_summary, memo) 
VALUES (1, '제주도 3일 여행', TO_DATE('2025-06-01', 'YYYY-MM-DD'), TO_DATE('2025-06-03', 'YYYY-MM-DD'), 'N', '제주시, 서귀포시', '여름 제주 여행 계획');
INSERT INTO TM_ITINERARY (user_id, itinerary_name, start_date, end_date, is_ai_recommend, region_summary, memo) 
VALUES (2, 'AI 추천 제주 투어', TO_DATE('2025-07-01', 'YYYY-MM-DD'), TO_DATE('2025-07-04', 'YYYY-MM-DD'), 'Y', '제주시', 'AI가 추천한 코스');
COMMIT;

-- 4. TM_ITINERARY_DETAIL
INSERT INTO TM_ITINERARY_DETAIL (itinerary_id, location_id, title, memo, plan_date, plan_time, stay_minutes, transport_mode, is_booked) 
VALUES (1, 1, '제주공항 도착', '렌터카 픽업', TO_DATE('2025-06-01', 'YYYY-MM-DD'), '09:30', 30, '렌터카', 'Y');
INSERT INTO TM_ITINERARY_DETAIL (itinerary_id, location_id, title, memo, plan_date, plan_time, stay_minutes, transport_mode, is_booked) 
VALUES (1, 2, '성산일출봉 관광', '일출 감상 및 등산', TO_DATE('2025-06-01', 'YYYY-MM-DD'), '11:00', 90, '렌터카', 'N');
INSERT INTO TM_ITINERARY_DETAIL (itinerary_id, location_id, title, memo, plan_date, plan_time, stay_minutes, transport_mode, is_booked) 
VALUES (1, NULL, '우도 방문', '자전거 투어', TO_DATE('2025-06-02', 'YYYY-MM-DD'), '14:00', 120, '도보', 'N');
COMMIT;

-- 5. TM_RESERVATION
INSERT INTO TM_RESERVATION (user_id, reservation_type, target_name, reservation_date, checkin_date, checkout_date, price, status_code, memo) 
VALUES (1, '숙소', '제주 호텔', TO_DATE('2025-05-25', 'YYYY-MM-DD'), TO_DATE('2025-06-01', 'YYYY-MM-DD'), TO_DATE('2025-06-03', 'YYYY-MM-DD'), 180000, 'ACTIVE', '2박 숙소 예약');
INSERT INTO TM_RESERVATION (user_id, reservation_type, target_name, reservation_date, checkin_date, checkout_date, price, status_code, memo) 
VALUES (2, '렌터카', '제주렌트카', TO_DATE('2025-05-25', 'YYYY-MM-DD'), TO_DATE('2025-06-01', 'YYYY-MM-DD'), TO_DATE('2025-06-03', 'YYYY-MM-DD'), 90000, 'ACTIVE', '2일 렌터카 예약');
INSERT INTO TM_RESERVATION (user_id, reservation_type, target_name, reservation_date, checkin_date, checkout_date, price, status_code, memo) 
VALUES (1, '숙소', '서귀포 펜션', TO_DATE('2025-05-25', 'YYYY-MM-DD'), TO_DATE('2025-06-01', 'YYYY-MM-DD'), TO_DATE('2025-06-03', 'YYYY-MM-DD'), 150000, 'CANCELLED', '취소된 예약');
COMMIT;

-- 6. TM_REVIEW
INSERT INTO TM_REVIEW (user_id, title, content, rating, created_at, is_deleted) 
VALUES (1, '제주 공항 근처 맛집 리뷰', '정말 맛있었어요!', 4.5, SYSDATE, 'N');
INSERT INTO TM_REVIEW (user_id, title, content, rating, created_at, is_deleted) 
VALUES (2, '성산일출봉 후기', '풍경이 너무 멋졌어요', 5.0, SYSDATE, 'N');
COMMIT;

-- 7. TM_BOARD
INSERT INTO TM_BOARD (user_id, category, title, content, like_count, view_count, is_secret, is_deleted, is_pinned, created_at) 
VALUES (1, '자유게시판', '첫 여행 후기', '제주도 정말 좋았어요!', 5, 100, 'N', 'N', 'N', SYSDATE);
INSERT INTO TM_BOARD (user_id, category, title, content, like_count, view_count, is_secret, is_deleted, is_pinned, created_at) 
VALUES (2, 'QNA', '제주 렌터카 추천', '어떤 렌터카 업체가 좋을까요?', 0, 10, 'N', 'N', 'N', SYSDATE);
COMMIT;

-- 8. TM_REPLY
INSERT INTO TM_REPLY (board_id, user_id, content, created_at, is_deleted) 
VALUES (1, 1, '저도 제주도 좋아해요!', SYSDATE, 'N');
INSERT INTO TM_REPLY (board_id, user_id, content, created_at, is_deleted) 
VALUES (1, 2, '어디가 제일 기억에 남으셨나요?', SYSDATE, 'N');
COMMIT;

-- 9. TM_LIKE
INSERT INTO TM_LIKE (target_type, target_id, user_id, created_at) 
VALUES ('BOARD', 1, 1, SYSTIMESTAMP);
INSERT INTO TM_LIKE (target_type, target_id, user_id, created_at) 
VALUES ('BOARD', 1, 2, SYSTIMESTAMP);
COMMIT;

-- 10. TM_IMAGE
INSERT INTO TM_IMAGE (target_type, target_id, original_filename, stored_filename, is_thumbnail, created_at) 
VALUES ('BOARD', 1, 'jeju.jpg', 'jeju_12345.jpg', 'Y', SYSTIMESTAMP);
INSERT INTO TM_IMAGE (target_type, target_id, original_filename, stored_filename, is_thumbnail, created_at) 
VALUES ('LOCATION', 2, 'sunrise.jpg', 'sunrise_67890.jpg', 'N', SYSTIMESTAMP);
COMMIT;

-- 11. TM_BOOKMARK
INSERT INTO TM_BOOKMARK (user_id, target_type, target_id, created_at) 
VALUES (1, 'BOARD', 1, SYSTIMESTAMP);
INSERT INTO TM_BOOKMARK (user_id, target_type, target_id, created_at) 
VALUES (2, 'LOCATION', 2, SYSTIMESTAMP);
COMMIT;

-- 12. TM_WEATHER
INSERT INTO TM_WEATHER (location_name, weather_date, temp_min, temp_max, weather_desc, precipitation, snowfall, humidity, wind_speed, pm10, pm25, created_at) 
VALUES ('제주 공항', TO_DATE('2025-06-01', 'YYYY-MM-DD'), 18.0, 25.0, '맑음', 0.0, 0.0, 60.0, 2.5, 25.0, 10.0, CURRENT_TIMESTAMP);
INSERT INTO TM_WEATHER (location_name, weather_date, temp_min, temp_max, weather_desc, precipitation, snowfall, humidity, wind_speed, pm10, pm25, created_at) 
VALUES ('성산일출봉', TO_DATE('2025-06-01', 'YYYY-MM-DD'), 17.5, 24.0, '구름', 0.2, 0.0, 65.0, 3.0, 28.0, 12.0, CURRENT_TIMESTAMP);
COMMIT;

-- 13. TM_STATS
INSERT INTO TM_STATS (user_id, category, target_id, count, stats_date, created_at) 
VALUES (1, 'VIEW', 1, 1, SYSDATE, SYSDATE);
INSERT INTO TM_STATS (user_id, category, target_id, count, stats_date, created_at) 
VALUES (2, 'SEARCH', 2, 5, SYSDATE, SYSDATE);
INSERT INTO TM_STATS (user_id, category, target_id, count, stats_date, created_at) 
VALUES (1, 'LIKE', 1, 2, SYSDATE, SYSDATE);
COMMIT;

-- 14. TM_POINT
INSERT INTO TM_POINT (user_id, point_change, point_reason_cd, point_desc, created_at) 
VALUES (1, 100, 'REVIEW', '리뷰 작성 포인트', SYSDATE);
INSERT INTO TM_POINT (user_id, point_change, point_reason_cd, point_desc, created_at) 
VALUES (2, -50, 'BOOKING_CANCEL', '예약 취소로 인한 포인트 차감', SYSDATE);
INSERT INTO TM_POINT (user_id, point_change, point_reason_cd, point_desc, created_at) 
VALUES (1, 50, 'CHECKIN', '체크인 포인트', SYSDATE);
COMMIT;

-- 15. TM_KPI_LOG
INSERT INTO TM_KPI_LOG (user_id, kpi_type, target_id, target_type, kpi_count, occurred_at) 
VALUES (1, 'PAGE_VIEW', 1, 'BOARD', 10, SYSDATE);
INSERT INTO TM_KPI_LOG (user_id, kpi_type, target_id, target_type, kpi_count, occurred_at) 
VALUES (2, 'BOOKMARK', 3, 'ITINERARY', 5, SYSDATE);
INSERT INTO TM_KPI_LOG (user_id, kpi_type, target_id, target_type, kpi_count, occurred_at) 
VALUES (1, 'SEARCH', 2, 'LOCATION', 3, SYSDATE);
COMMIT;

-- 16. TM_LOG
INSERT INTO TM_LOG (user_id, action_type, target_type, target_id, description, created_at) 
VALUES (1, 'LOGIN', NULL, NULL, '로그인 성공', SYSDATE);
INSERT INTO TM_LOG (user_id, action_type, target_type, target_id, description, created_at) 
VALUES (2, 'ITINERARY_VIEW', 'ITINERARY', 1, '제주도 여행 일정 확인', SYSDATE);
INSERT INTO TM_LOG (user_id, action_type, target_type, target_id, description, created_at) 
VALUES (1, 'BOARD_CREATE', 'BOARD', 1, '게시글 작성', SYSDATE);
COMMIT;

-- 17. TM_SOCIAL_LOGIN
INSERT INTO TM_SOCIAL_LOGIN (user_id, provider, provider_id, email, profile_image, created_at) 
VALUES (1, 'KAKAO', 'kakao123', 'test_kakao@example.com', 'https://example.com/kakao.png', CURRENT_TIMESTAMP);
INSERT INTO TM_SOCIAL_LOGIN (user_id, provider, provider_id, email, profile_image, created_at) 
VALUES (2, 'NAVER', 'naver456', 'test_naver@example.com', 'https://example.com/naver.png', CURRENT_TIMESTAMP);
COMMIT;

-- 18. TM_ADMIN_REPLY_LOG
INSERT INTO TM_ADMIN_REPLY_LOG (target_type, target_id, admin_id, content, created_at) 
VALUES ('BOARD', 1, 3, '관리자 답변입니다. 게시판 규칙을 준수해주세요.', CURRENT_TIMESTAMP);
INSERT INTO TM_ADMIN_REPLY_LOG (target_type, target_id, admin_id, content, created_at) 
VALUES ('REVIEW', 1, 3, '리뷰에 대한 답변입니다. 감사합니다.', CURRENT_TIMESTAMP);
COMMIT;

-- 19. TM_CODE
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('GENDER', 'M', '남성', '남성 코드', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('GENDER', 'F', '여성', '여성 코드', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('ROLE', 'USER', '일반 사용자', '일반 사용자 권한', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('ROLE', 'ADMIN', '관리자', '관리자 권한', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('STATUS', 'ACTIVE', '정상', '정상 상태', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('STATUS', 'BLOCKED', '정지', '정지 상태', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('STATUS', 'DELETED', '삭제', '삭제 상태', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('RESERVATION_TYPE', 'HOTEL', '숙소', '숙소 예약', 'Y');
INSERT INTO TM_CODE (code_group, code, code_name, description, use_yn) 
VALUES ('RESERVATION_TYPE', 'CAR', '렌터카', '렌터카 예약', 'Y');
COMMIT;

-- 20. TM_AI_RECOMMEND_LOG
INSERT INTO TM_AI_RECOMMEND_LOG (user_id, recommend_type, result_id, result_type, context, emotion_tags, user_input, feedback, recommended_at) 
VALUES (1, 'COURSE', 1, 'LOCATION', '{"weather":"sunny"}', '힐링,여유', '요즘 지쳐서 쉬고 싶어요', 'GOOD', SYSDATE);
INSERT INTO TM_AI_RECOMMEND_LOG (user_id, recommend_type, result_id, result_type, context, emotion_tags, user_input, feedback, recommended_at) 
VALUES (2, 'DRINK', 1, 'RESTAURANT', '{"mood":"celebration"}', '축하,분위기', '오늘 친구 생일이야!', 'BAD', SYSDATE);
COMMIT;

-- 21. TM_REPORT
INSERT INTO TM_REPORT (target_type, target_id, report_reason, reporter_id, report_date, status) 
VALUES ('BOARD', 1, '부적절한 내용', 1, SYSDATE, 'ACTIVE');
INSERT INTO TM_REPORT (target_type, target_id, report_reason, reporter_id, report_date, status) 
VALUES ('REPLY', 1, '욕설 포함', 2, SYSDATE, 'DONE');
COMMIT;

-- 22. TM_FRIEND
INSERT INTO TM_FRIEND (requester_id, receiver_id, status, request_date) 
VALUES (1, 2, 'ACCEPTED', SYSDATE);
INSERT INTO TM_FRIEND (requester_id, receiver_id, status, request_date) 
VALUES (2, 1, 'PENDING', SYSDATE);
COMMIT;

-- 23. TM_VENDOR_CATEGORY
INSERT INTO TM_VENDOR_CATEGORY (category_code, category_name, description, is_active, created_at) 
VALUES ('HOTEL', '숙소', '호텔, 게스트하우스 등', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_CATEGORY (category_code, category_name, description, is_active, created_at) 
VALUES ('CAR', '렌터카', '렌터카 업체', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_CATEGORY (category_code, category_name, description, is_active, created_at) 
VALUES ('TOUR', '관광', '관광 상품 제공 업체', 'Y', SYSDATE);
COMMIT;

-- 24. TM_VENDOR
INSERT INTO TM_VENDOR (name, category, contact_email, contact_phone, registered_at) 
VALUES ('제주호텔', 'HOTEL', 'hotel@jeju.com', '064-123-4567', SYSDATE);
INSERT INTO TM_VENDOR (name, category, contact_email, contact_phone, registered_at) 
VALUES ('제주렌트카', 'CAR', 'car@jeju.com', '064-234-5678', SYSDATE);
INSERT INTO TM_VENDOR (name, category, contact_email, contact_phone, registered_at) 
VALUES ('한라산투어', 'TOUR', 'tour@jeju.com', '064-345-6789', SYSDATE);
COMMIT;

-- 25. TM_VENDOR_ITEM
INSERT INTO TM_VENDOR_ITEM (vendor_id, name, category, region, price, description, available, registered_at) 
VALUES (1, '스탠다드 더블룸', 'ROOM', '제주시', 80000, '기본형 더블룸, 1박', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_ITEM (vendor_id, name, category, region, price, description, available, registered_at) 
VALUES (2, '소형차 (K3)', 'CAR', '제주시', 50000, '2인용 소형차, 1일 렌트', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_ITEM (vendor_id, name, category, region, price, description, available, registered_at) 
VALUES (3, '한라산 등반 가이드 투어', 'GUIDE', '서귀포시', 30000, '한라산 등산 가이드 포함 상품', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_ITEM (vendor_id, name, category, region, price, description, available, registered_at) 
VALUES (1, '디럭스 룸', 'ROOM', '제주시', 120000, '고급형 룸, 1박', 'N', SYSDATE);
COMMIT;

-- 26. TM_VENDOR_BOOKING_LINK
INSERT INTO TM_VENDOR_BOOKING_LINK (item_id, link_type, booking_url, is_active, created_at) 
VALUES (1, 'HOTEL', 'https://booking.jeju-hotel.com/standard-double', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_BOOKING_LINK (item_id, link_type, booking_url, is_active, created_at) 
VALUES (2, 'CAR', 'https://rent.jeju-car.com/k3-small', 'Y', SYSDATE);
INSERT INTO TM_VENDOR_BOOKING_LINK (item_id, link_type, booking_url, is_active, created_at) 
VALUES (3, 'TOUR', 'https://tour.jeju-guide.com/hallasan', 'Y', SYSDATE);
COMMIT;


